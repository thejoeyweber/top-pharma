---
description: 
globs: apps/**/app/**/*.tsx
alwaysApply: false
---
---
description:  Rules for Next.js applications in the monorepo. Consult for page/route work.
---

# App Router Structure
- Use route groups: `(marketing)`, `(dashboard)`, `(auth)`.
- Each group has a `layout.tsx` importing from `@workspace/ui/components/layouts`.
- Root layout: `/app/layout.tsx` for globals.
- Route-specific components: `_components/` subfolder.
- App-specific shared components: `components/`.

# Server & Client Components
- **Mandatory Directive:** Every `.tsx` file MUST start with `"use server"` or `"use client"`.
- **Data Fetching:** Fetch in Server Components/Route Handlers. Pass data via props.
- **Mutations:** Use Server Actions from `actions/`.
- **Suspense:** Use `<Suspense>` with a Skeleton/Fallback in Server Components for async operations.
- **Client Components:** Use for hooks, event handlers, browser APIs.
- **Passing Server Components:** Pass as `{children}` prop to Client Components.

# Frontend Practices
- **Form Validation:**
    - Use libraries like Zod for schema validation on server actions.
    - Implement client-side validation for immediate feedback (e.g., with `react-hook-form`).
    - Provide clear, specific error messages next to form fields.
    - Handle form submission errors gracefully (displaying messages from `ActionState`).
- **Performance:**
    - Avoid unnecessary re-renders (use `React.memo`, `useCallback` where appropriate).
    - Consider `next/dynamic` for lazy loading heavy components.
    - Optimize images using `next/image`.
- **Error Handling (UI):** Display user-friendly messages based on `ActionState` failure or caught client-side errors. Log details to console.

# Database Integration
- Import database client and types from `@workspace/db`
- Use Server Actions for all database operations
- Follow schema organization rules from db-package.mdc