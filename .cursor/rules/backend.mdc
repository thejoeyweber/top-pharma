---
description: 
globs: apps/*/actions/**/*.ts,packages/db/**/*.ts
alwaysApply: false
---
---
description: Rules for backend (Database, Server Actions). Consult for backend logic.
---

# Backend Overview
- **Stack:** PostgreSQL (Supabase), Drizzle ORM, Next.js Server Actions.
- **Location:** Server Actions in `apps/*/actions/`, database in `packages/db/`.

# Database (`packages/db`)
- **Schema:** Define in `/src/schema/*.ts`, export via `/src/schema/index.ts`.
- **Schema Rules:**
    - Standard columns: `id`, `createdAt`, `updatedAt`.
    - `userId: text("user_id").notNull()` for Clerk users.
    - Define relations with `references()`. Use `onDelete` appropriately.
    - Use `pgEnum` for fixed choices.
    - Export `InsertType` and `SelectType`.
- **Migrations:**
    - Generate: `pnpm --filter @workspace/db generate`. Apply: `pnpm --filter @workspace/db migrate`.
    - **AI Rule:** Do not manually edit migration files.
- **Querying:**
    - Import and use `db` instance from `@workspace/db`.
    - **Optimization:** Select only necessary fields (`{ columns: { ... } }`). Create DB indexes for frequently queried/filtered columns (inform user to add index manually). Use pagination (`limit`, `offset`) for large datasets.
    - **Transactions:** For multi-step operations that must succeed or fail together, use `db.transaction(async (tx) => { ... })`. Ensure atomicity.
- **Connections:** Drizzle/postgres.js handles pooling; ensure DB URL is secure in `.env.local`.

# Server Actions (`apps/*/actions`)
- **Location:** `/actions/`, grouped by domain (e.g., `actions/todos-actions.ts`).
- **Naming:** Suffix with `Action`.
- **Directive:** Start file with `"use server"`.
- **Return Type:** MUST return `Promise<ActionState<T>>` (defined in `types/server-action-types.ts`). Use `void` for `T` if no data on success.
- **Structure:**
    - Use `try...catch`.
    - `try`: Validate input (Zod recommended), perform logic, return `{ isSuccess: true, ... }`.
    - `catch`: Log detailed error (`console.error`), return `{ isSuccess: false, message: "User-friendly error" }`.
- **Auth:** Check `userId` from `auth()` for protected actions. Perform authorization checks (user owns the resource).
- **Input Validation:** Rigorously validate inputs at the start of every action.
- **DRY:** Extract repeated logic (e.g., permission checks, complex queries) into helper functions within or outside the action file.