---
description: 
globs: apps/*/actions/**/*.ts,packages/db/**/*.ts
alwaysApply: false
---
---
description: Authoritative guide for Drizzle ORM, schema design, migrations, and Server Actions.
---

# Backend Overview
Stack: **PostgreSQL (Supabase) + Drizzle ORM + Next.js Server Actions**.
Schema code lives in `packages/db`, actions in `apps/*/actions`.

---
## 1. Database Rules (`packages/db`)
### 1.1 Schema Location & Naming
- Place table definitions under `src/schema/*-schema.ts` (kebab‑case prefix, e.g., `companies-schema.ts`).
- Re‑export every schema from `src/schema/index.ts`.

### 1.2 Required Columns
| Column | Type | Details |
|--------|------|---------|
| `id` | `uuid` primary key (`defaultRandom()`) |
| `createdAt` | `timestamp` (`defaultNow()`) |
| `updatedAt` | `timestamp` (`defaultNow()` + `.$onUpdate(() => new Date())`) |
| `userId` (when relevant) | `text` `notNull()` | Clerk user linkage |

### 1.3 Enums Example
```ts
import { pgEnum } from "drizzle-orm/pg-core"
export const membershipEnum = pgEnum("membership", ["free", "pro"])
```

### 1.4 Relations Example
```ts
import { pgTable, uuid, text } from "drizzle-orm/pg-core"
import { chatsTable } from "./chats-schema"
export const messagesTable = pgTable("messages", {
  id: uuid("id").defaultRandom().primaryKey(),
  chatId: uuid("chat_id").references(() => chatsTable.id, { onDelete: "cascade" }).notNull(),
  content: text("content").notNull()
})
```

### 1.5 Migrations
- **Generate:** `pnpm --filter @workspace/db generate`  
- **Apply:** `pnpm --filter @workspace/db migrate`
- **AI Rule:** *Never* hand‑edit generated migration SQL.

---
## 2. Querying & Performance
- Import `db` from `@workspace/db`.
- Select only necessary columns:
  ```ts
  db.select({ id: users.id, email: users.email })
  ```
- Paginate large queries (`limit`, `offset`).
- Add DB indexes to high‑cardinality filter columns (notify maintainer to create index manually).
- Use `db.transaction()` for multi‑step atomic operations.

---
## 3. Server Actions (`apps/*/actions`)
### 3.1 File & Function Conventions
| Aspect | Rule |
|--------|------|
| Folder | group by domain (`actions/companies-actions.ts`). |
| Directive | File starts with `"use server"`. |
| Naming | Functions end with `Action`. CRUD order inside file. |
| Return | `Promise<ActionState<T>>`. `T = void` when no data returned. |

### 3.2 Skeleton Example (CRUD)
```ts
"use server"
import { db } from "@workspace/db"
import { companiesTable, InsertCompany, SelectCompany } from "@workspace/db"
import { ActionState } from "@/types"
import { eq } from "drizzle-orm"

export async function createCompanyAction(
  company: InsertCompany
): Promise<ActionState<SelectCompany>> {
  try {
    const [newCompany] = await db.insert(companiesTable).values(company).returning()
    return { isSuccess: true, message: "Company created", data: newCompany }
  } catch (error) {
    console.error("createCompanyAction error:", error)
    return { isSuccess: false, message: "Failed to create company" }
  }
}
```

### 3.3 Validation & Auth
- Validate inputs with **Zod** before DB operations.
- Retrieve `{ userId }` via `auth()`; throw if unauthenticated.
- Confirm the user owns or is authorized for the resource.

### 3.4 Date Columns
- When comparing or inserting JS `Date` objects, convert to ISO strings (`.toISOString()`) to match `PgDateString` typing.

---
## 4. Additional References
- **Auth specifics:** `auth.mdc`
- **Payments, Storage, Analytics:** dedicated rule files.
